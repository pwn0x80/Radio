{"ast":null,"code":"var _jsxFileName = \"/home/pwn0x80/Documents/projects/radio/src/page/Genres/GenresList.jsx\",\n  _s = $RefreshSig$();\nimport { Wrapper, WrapperBox, OptionText } from \"../../components/popUpBox/PopUpBox\";\nimport React, { useCallback, useEffect, useInsertionEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Subject } from \"../../services/radioListServices\";\nimport urlUpdate from \"../../redux/urlUpdate.js\";\nimport { updatestart, radioUpdateGenreSuccess, updateCurrentPlaying, updateError, radioBaseUrlUpdateSuccess, updateStart } from \"../../redux/radioSlice\";\n\n// https://www.npmjs.com/package/@pwn0x80/react-infinite-scroller\nimport { useInfiniteScroller } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet fetchFlowGenres;\nexport const GenresList = _ref => {\n  _s();\n  let {\n    toggle\n  } = _ref;\n  const {\n    scrollFetch,\n    setScrollFetch,\n    InfiniteScroll\n  } = useInfiniteScroller();\n\n  // store genres list here\n  let [flowgenres, setFlowgenres] = useState([]);\n  // let observerRef = useRef();\n  const dispatch = new useDispatch();\n  useEffect(() => {\n    let Observer = {\n      signal: function () {\n        setScrollFetch(e => !e);\n      }\n    };\n    Subject.add(Observer);\n  }, []);\n  let isGenresDataAvailable = () => {\n    if (flowgenres[0] == null) {\n      return true;\n    }\n    return false;\n  };\n  useEffect(() => {\n    if (isGenresDataAvailable()) {\n      fetchFlowGenres = Subject.getFlow();\n    }\n    if (Subject.isDataAvailable()) {\n      let offset = 30;\n      for (let i = 0; i < offset; i++) {\n        let newGenres = fetchFlowGenres.next().value;\n        setFlowgenres(e => [...e, newGenres]);\n      }\n    } else {\n      return;\n    }\n  }, [scrollFetch]);\n  let selectTrigger = e => {\n    toggle(false);\n    dispatch(updateStart());\n    try {\n      dispatch(radioUpdateGenreSuccess({\n        name: \"radio\",\n        genres: e.target.innerHTML\n      }));\n    } catch {\n      dispatch(updateError());\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(WrapperBox, {\n      children: flowgenres === null || flowgenres === void 0 ? void 0 : flowgenres.map((element, keys) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n            children: /*#__PURE__*/_jsxDEV(OptionText, {\n              onClick: selectTrigger,\n              children: element === null || element === void 0 ? void 0 : element.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(GenresList, \"BXbcTBTP8JrLerypVKrKEKyoMa8=\", false, function () {\n  return [useInfiniteScroller];\n});\n_c = GenresList;\nvar _c;\n$RefreshReg$(_c, \"GenresList\");","map":{"version":3,"names":["Wrapper","WrapperBox","OptionText","React","useCallback","useEffect","useInsertionEffect","useRef","useState","useDispatch","useSelector","Subject","urlUpdate","updatestart","radioUpdateGenreSuccess","updateCurrentPlaying","updateError","radioBaseUrlUpdateSuccess","updateStart","useInfiniteScroller","fetchFlowGenres","GenresList","toggle","scrollFetch","setScrollFetch","InfiniteScroll","flowgenres","setFlowgenres","dispatch","Observer","signal","e","add","isGenresDataAvailable","getFlow","isDataAvailable","offset","i","newGenres","next","value","selectTrigger","name","genres","target","innerHTML","map","element","keys"],"sources":["/home/pwn0x80/Documents/projects/radio/src/page/Genres/GenresList.jsx"],"sourcesContent":["import { Wrapper, WrapperBox, OptionText } from \"../../components/popUpBox/PopUpBox\";\nimport React, { useCallback, useEffect, useInsertionEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Subject } from \"../../services/radioListServices\";\nimport urlUpdate from \"../../redux/urlUpdate.js\"\nimport {\n  updatestart,\n  radioUpdateGenreSuccess,\n  updateCurrentPlaying,\n  updateError,\n  radioBaseUrlUpdateSuccess,\n  updateStart\n} from \"../../redux/radioSlice\";\n\n// https://www.npmjs.com/package/@pwn0x80/react-infinite-scroller\nimport { useInfiniteScroller } from \"../../utils\";\nlet fetchFlowGenres\nexport const GenresList = ({ toggle }) => {\n  const { scrollFetch, setScrollFetch, InfiniteScroll } = useInfiniteScroller()\n\n\n\n  // store genres list here\n  let [flowgenres, setFlowgenres] = useState([])\n  // let observerRef = useRef();\n  const dispatch = new useDispatch()\n  useEffect(() => {\n    let Observer = {\n      signal: function() {\n        setScrollFetch(e => !e)\n      }\n    }\n    Subject.add(Observer);\n  }, [])\n\n\n  let isGenresDataAvailable = () => {\n    if (flowgenres[0] == null) {\n      return true;\n    }\n    return false;\n  }\n  useEffect(() => {\n    if (isGenresDataAvailable()) {\n      fetchFlowGenres = Subject.getFlow();\n    }\n    if (Subject.isDataAvailable()) {\n      let offset = 30;\n      for (let i = 0; i < offset; i++) {\n        let newGenres = fetchFlowGenres.next().value;\n        setFlowgenres((e) => [...e, newGenres]);\n      }\n    } else {\n      return\n    }\n  }, [scrollFetch])\n\n  let selectTrigger = (e) => {\n    toggle(false)\n    dispatch(updateStart())\n    try {\n      dispatch(radioUpdateGenreSuccess({ name: \"radio\", genres: e.target.innerHTML }))\n    } catch {\n      dispatch(updateError())\n    }\n  }\n\n  return (\n    <Wrapper>\n      <WrapperBox>\n        {\n          flowgenres?.map((element, keys) => {\n            return (\n              <>\n                <InfiniteScroll >\n                  <OptionText onClick={selectTrigger} >\n                    {element?.name}\n                  </OptionText>\n                </InfiniteScroll>\n              </>\n            )\n          })\n        }\n      </WrapperBox>\n    </Wrapper>\n  )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}